{"version":3,"sources":["main.js","webgl.js","objects/Sphere.js","objects/Triangle.js"],"names":[],"mappingsnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.min.js","sourcesContent":["var webgl, gui;\n\n$(document).ready(init);\n\nfunction init(){\n    webgl = new Webgl(window.innerWidth, window.innerHeight);\n    $('.three').append(webgl.renderer.domElement);\n\n    gui = new dat.GUI();\n    // gui.add(webgl.triangle.rotation, 'x').min(-Math.PI).max(Math.PI);\n    // gui.add(webgl.triangle.rotation, 'y').min(-Math.PI).max(Math.PI);\n    // gui.add(webgl.triangle.rotation, 'z').min(-Math.PI).max(Math.PI);\n    gui.close();\n\n    $(window).on('resize', resizeHandler);\n\n    animate();\n}\n\nfunction resizeHandler() {\n    webgl.resize(window.innerWidth, window.innerHeight);\n}\n\nfunction animate() {\n    requestAnimationFrame(animate);\n    webgl.render();\n}","var Webgl = (function(){\n\n    function Webgl(width, height){\n        // Basic three.js setup\n        this.scene = new THREE.Scene();\n        \n        this.camera = new THREE.PerspectiveCamera(50, width / height, 1, 10000);\n        this.camera.position.z = 300;\n\n        this.renderer = new THREE.WebGLRenderer();\n        this.renderer.setSize(width, height);\n        this.renderer.setClearColor(0xebc130);\n\n        // Directly add objects\n        // this.someObject = new THREE.Mesh(new THREE.BoxGeometry(50, 50, 50), new THREE.MeshBasicMaterial({color: 0xFF0000, wireframe: true}));\n        // this.someObject.position.set(-60, 0, 0);\n        // this.scene.add(this.someObject);\n\n        // Or create container classes for them to simplify your code\n        // this.triangle = new Triangle();\n        // this.triangle.position.set(0, 0, 0);\n        // this.scene.add(this.triangle);\n\n        // ---- LINE 1 ----\n        var geometry = new THREE.Geometry();\n        geometry.vertices.push(new THREE.Vector3(-50, 0, 0));\n        geometry.vertices.push(new THREE.Vector3(-50, 0, 0));\n        var line = new THREE.Line(geometry, new THREE.LineBasicMaterial({\n            color: 0xFFFFFF,\n            linewidth: 5\n        }));\n\n        // ---- LINE 2 ----\n        var geometry2 = new THREE.Geometry();\n        geometry2.vertices.push(new THREE.Vector3(50, 0, 0));\n        geometry2.vertices.push(new THREE.Vector3(50, 0, 0));\n        var line2 = new THREE.Line(geometry2, new THREE.LineBasicMaterial({\n            color: 0xFFFFFF,\n            linewidth: 5\n        }));\n\n        this.scene.add(line); \n        this.scene.add(line2); \n\n        // using TweenLite to animate\n        var tl1 = new TimelineLite();          \n        var parameters = { x: 50, y: 0, z:0, ease:Quad.easeIn, delay: 0.3, onUpdate: function() {\n            line.geometry.verticesNeedUpdate = true;\n        }};\n        tl1.add(TweenLite.to(line.geometry.vertices[1] , 1, parameters));\n        \n        var tl2 = new TimelineLite();\n        var parameters2 = { x: 0, y: 71, z:0, ease:Quad.easeIn, delay: 1.3, onUpdate: function() {\n            line2.geometry.verticesNeedUpdate = true;\n        }};\n        tl2.add(TweenLite.to(line2.geometry.vertices[1] , 1, parameters2));\n    }\n\n    Webgl.prototype.resize = function(width, height) {\n        this.camera.aspect = width / height;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(width, height);\n    };\n\n    Webgl.prototype.render = function() {    \n        this.renderer.render(this.scene, this.camera);\n\n        // this.someObject.rotation.y += 0.01;\n        // this.someObject.rotation.x += 0.01;\n\n        //this.triangle.update();\n    };\n\n    return Webgl;\n\n})();","var Sphere = (function(){\n\n    function Sphere(){\n        THREE.Object3D.call(this);\n\n        var geometry = new THREE.SphereGeometry(35);\n        var material = new THREE.MeshBasicMaterial({color: 0x3facc8, wireframe: true});\n        this.mesh = new THREE.Mesh(geometry, material);\n        this.add(this.mesh);\n    }\n\n    Sphere.prototype = new THREE.Object3D;\n    Sphere.prototype.constructor = Sphere;\n\n    Sphere.prototype.update = function() {\n        this.mesh.rotation.y += 0.01;\n    };\n\n    return Sphere;\n})();","var Triangle = (function(){\n\n    function Triangle(){\n        THREE.Object3D.call(this);\n\n        var geometry = new THREE.TetrahedronGeometry(40, 0);\n\n        //geometry.faces[0].color.setHex(0x888888);\n\n        for ( var i = 0; i < geometry.faces.length; i ++ ) {\n            geometry.faces[ i ].color.setHex( Math.random() * 0xffffff );\n        }\n\n        var material = new THREE.MeshBasicMaterial({\n            color: 0xffffff,\n            vertexColors: THREE.FaceColors\n        });\n\n        this.mesh = new THREE.Mesh(geometry, material);\n        //this.mesh.rotation.x = 10;\n        this.add(this.mesh);\n    }\n\n    Triangle.prototype = new THREE.Object3D;\n    Triangle.prototype.constructor = Triangle;\n\n    Triangle.prototype.update = function() {\n        //this.mesh.rotation.z += 0.01;\n    };\n\n    return Triangle;\n})();"],"sourceRoot":"/source/"}