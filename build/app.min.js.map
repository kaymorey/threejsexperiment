{"version":3,"sources":["main.js","webgl.js","objects/Cube.js","objects/CubeManager.js","objects/CubeParticles.js","objects/Sphere.js","objects/Triangle.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrtzlHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.min.js","sourcesContent":["var webgl, gui;\n\n$(document).ready(init);\n\nfunction init(){\n    webgl = new Webgl(window.innerWidth, window.innerHeight);\n    $('.three').append(webgl.renderer.domElement);\n\n    gui = new dat.GUI();\n    gui.add(webgl.camera.rotation, 'x').min(-20).max(20);\n    gui.close();\n\n    $(window).on('resize', resizeHandler);\n    // when the mouse moves, call the given function\n    $(window).on('mousemove', onDocumentMouseMove);\n\n    animate();\n\n}\n\nfunction resizeHandler() {\n    webgl.resize(window.innerWidth, window.innerHeight);\n}\n\nfunction onDocumentMouseMove(event) {\n    // the following line would stop any other event handler from firing\n    // (such as the mouse's TrackballControls)\n    event.preventDefault();\n    \n    // update the mouse variable\n    webgl.mouse.x = (event.clientX / window.innerWidth) * 2 - 1;\n    webgl.mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;\n}\n\nfunction animate() {\n    requestAnimationFrame(animate);\n    webgl.render();\n}","var Webgl = (function(){\n\n    function Webgl(width, height){\n        webgl = this;\n\n        // Basic three.js setup\n        this.scene = new THREE.Scene();\n        \n        this.camera = new THREE.PerspectiveCamera(50, width / height, 1, 10000);\n        this.camera.position.z = 300;\n\n        this.renderer = new THREE.WebGLRenderer();\n        this.renderer.setSize(width, height);\n        this.renderer.setClearColor(0x19bec0);\n\n        this.composer = new THREE.EffectComposer(this.renderer);\n        this.composer.addPass(new THREE.RenderPass(this.scene, this.camera));\n\n        // Glitch Effect\n        glitchPass = new THREE.GlitchPass();\n        glitchPass.renderToScreen = true;\n        this.composer.addPass(glitchPass);\n        this.glichEffect = false;\n\n        // Lights\n        this.light = new THREE.PointLight(0xffffff, 100, 1200);\n        this.light.position.set(0, 0, 350);\n        this.scene.add(this.light);\n\n        this.ambientLight = new THREE.AmbientLight(0x666666);\n        this.scene.add(this.ambientLight);\n\n        // Global variables\n        this.mouse = { x: 0, y: 0 };\n        this.INTERSECTED;\n\n        this.counter = 200;\n        this.hoverInteraction = false;\n        this.spreadParticles = false;\n\n        // Cube Manager\n        this.cubeManager = new CubeManager();\n        // Display first cube\n        this.cubeManager.animateFirstSquare();\n        \n\n        $(document).on('click', 'a.next', function(e) {\n            e.preventDefault();\n            $(this).fadeOut();\n            $('h1.first').fadeOut();\n            $('h1.second').fadeIn('slow');\n            window.setTimeout(function() {\n                $('h1.second').fadeOut('slow', function() {\n                    $('h1.third').fadeIn();\n                    webgl.cubeManager.addZCubes();\n                    window.setTimeout(function() {\n                        $('h1.third').fadeOut('slow');\n                    }, 3000);\n                });   \n            }, 1000);         \n        });\n\n        //Haut, haut, bas, bas, gauche, droite, gauche, droite, B, A  \n        /*var k = [38, 38, 40, 40, 37, 39, 37, 39, 66, 65],  \n        n = 0;  \n        $(document).keydown(function (e) {  \n            if (e.keyCode === k[n++]) {  \n                if (n === k.length) {  \n                    alert('Konami !!!'); // Ã  remplacer par votre code  \n                    return !1  \n                }  \n            } else k = 0  \n        }); */\n    }\n\n    Webgl.prototype.awayCamera = function() {\n        TweenLite.to(webgl.camera.position, 0.8, {z: 1000, ease: Expo.easeOut, onComplete: function() {\n            webgl.cubeManager.displayHorizontalCubes();\n            webgl.cubeManager.popCubes(3, 8);\n            webgl.cubeManager.popCubes(9, 14);\n            webgl.cubeManager.displayVerticalCubes();\n            webgl.hoverInteraction = true;\n            window.setTimeout(function() {\n                $('div.title').fadeIn('slow');\n            }, 2000);\n            \n        }});\n    };\n\n    Webgl.prototype.moveLight = function() {\n        TweenLite.to(this.light.position, 1, {x: 0, y: -100, z: 50});\n        this.light.intensity = 200;\n    }\n\n    Webgl.prototype.resize = function(width, height) {\n        this.camera.aspect = width / height;\n        this.camera.updateProjectionMatrix();\n        this.renderer.setSize(width, height);\n    };\n\n    Webgl.prototype.render = function() {    \n        this.renderer.render(this.scene, this.camera);\n\n        if (this.spreadParticles) {\n            this.cubeParticles.update();\n        }\n\n        if (this.glichEffect) {\n            this.composer.render();\n        }\n\n        if (this.hoverInteraction) {\n            this.cubesHoverEffects();\n        }\n        if (this.cubeManager.cubesRotation) {\n            this.cubeManager.rotateCubes();\n        }\n    };\n\n    Webgl.prototype.cubesHoverEffects = function() {\n        // find intersections\n\n        // create a Ray with origin at the mouse position\n        //   and direction into the scene (camera direction)\n        var vector = new THREE.Vector3(this.mouse.x, this.mouse.y, 1).unproject(this.camera);\n        var ray = new THREE.Raycaster(this.camera.position, vector.sub(this.camera.position).normalize());\n\n        // create an array containing all objects in the scene with which the ray intersects\n        var intersects = ray.intersectObjects(this.scene.children, true);\n        \n        // if there is one (or more) intersections\n        if (intersects.length > 0)\n        {\n            // if the closest object intersected is not the currently stored intersection object\n            if (intersects[0].object != this.INTERSECTED) \n            {\n                if (this.INTERSECTED) {\n                    TweenLite.to(this.INTERSECTED.scale, 0.1, {x: 1, y: 1});\n                    TweenLite.to(this.INTERSECTED.rotation, 0.1, {z: 0});\n                }\n                // store reference to closest object as current intersection object\n                this.INTERSECTED = intersects[0].object;\n                TweenLite.to(this.INTERSECTED.scale, 0.1, {x: 1.4, y: 1.4});\n                TweenLite.to(this.INTERSECTED.rotation, 0.1, {z: 10});\n            }\n        } \n        else // there are no intersections\n        {\n            if (this.INTERSECTED) {\n                TweenLite.to(this.INTERSECTED.scale, 0.3, {x: 1, y: 1});\n                TweenLite.to(this.INTERSECTED.rotation, 0.1, {z: 0});\n            }\n\n            this.INTERSECTED = null;\n        }\n    }\n\n    return Webgl;\n\n})();","var Cube = (function(){\n\n    function Cube(width, height, depth){\n        THREE.Object3D.call(this);\n\n        var geometry = new THREE.BoxGeometry(width, height, depth);\n        var material = new THREE.MeshLambertMaterial({ color: 0xffffff})\n\n        this.mesh = new THREE.Mesh(geometry, material);\n        this.mesh.position.set(0, 0, 0);\n        //this.mesh.rotation.x = 10;\n        this.add(this.mesh);\n    }\n\n    Cube.prototype = new THREE.Object3D;\n    Cube.prototype.constructor = Cube;\n\n    Cube.prototype.update = function() {\n        //this.mesh.rotation.z += 0.01;\n    };\n\n    return Cube;\n})();","var CubeManager = (function(){\n\n\tfunction CubeManager(){\n\t\tthis.cubesDim = 100;\n        this.cubesRotation = false;\n\t\tthis.cubes = [];\n\t}\n\n\tfunction animateTwoSquares(duration) {\n        \n    }\n\n    function displayHorizontalCubes() {\n        // Left\n        for (var i = -2; i >= -7; i--) {\n            var cube = new Cube(1, 1, 1);\n            cube.position.set(i* 150 ,0, 0);\n            this.cubes.push(cube);\n        }\n        // Right\n        for (var i = 2; i <= 7; i++) {\n            var cube = new Cube(1, 1, 1);\n            cube.position.set(i* 150 ,0, 0);\n            this.cubes.push(cube);\n        }\n    }\n\n    CubeManager.prototype.constructor = CubeManager;\n\n    CubeManager.prototype.animateFirstSquare = function() {\n        cubeManager = this;\n        var cube = new Cube(1, 1, 1);\n        cube.scale.y = 10;\n        cube.position.set(-this.cubesDim/2, -this.cubesDim/2 , 0);\n        webgl.scene.add(cube);\n        this.cubes = [cube];\n\n        TweenLite.to(cube.scale, 0.8, {x: this.cubesDim, ease: Expo.easeIn});\n\n        TweenLite.to(cube.position, 0.8, {x: 0, ease: Expo.easeIn});\n\n        TweenLite.to(cube.scale, 0.8, {y: this.cubesDim, delay: 0.8, ease: Expo.easeOut});\n\n        TweenLite.to(cube.position, 0.8, {y: 0, delay: 0.8, ease: Expo.easeOut, onComplete: function() {\n            cubeManager.animateTwoSquares();\n        }});\n    };\n\n    CubeManager.prototype.animateTwoSquares = function() {\n        this.cubes.push(new Cube(1, 1, 1), new Cube(1, 1, 1));\n        this.cubes[1].scale.x = this.cubesDim;\n        this.cubes[1].scale.y = this.cubesDim;\n        this.cubes[2].scale.x = this.cubesDim;\n        this.cubes[2].scale.y = this.cubesDim;\n\n        webgl.scene.add(this.cubes[1]);\n        webgl.scene.add(this.cubes[2]);\n\n        TweenLite.to(this.cubes[1].position, 0.8, {x: -150, ease: Expo.easeOut});\n\n        TweenLite.to(this.cubes[2].position, 0.8, {x: 150, ease: Expo.easeOut, onComplete: function() {\n            webgl.awayCamera();  \n        }});\n    };\n\n    CubeManager.prototype.displayHorizontalCubes = function() {\n        // Left\n        for (var i = -2; i >= -7; i--) {\n            var cube = new Cube(1, 1, 1);\n            cube.position.set(i* 150 ,0, 0);\n            this.cubes.push(cube);\n        }\n        // Right\n        for (var i = 2; i <= 7; i++) {\n            var cube = new Cube(1, 1, 1);\n            cube.position.set(i* 150 ,0, 0);\n            this.cubes.push(cube);\n        }\n    };\n\n    CubeManager.prototype.popCubes = function(minIndex, maxIndex) {\n        var j = 0;\n        for (var i = minIndex; i <= maxIndex; i++) {\n            var cube = this.cubes[i];\n            webgl.scene.add(cube);\n            TweenLite.to(cube.scale, 0.3, {x: this.cubesDim, y: this.cubesDim, z: 1, ease: Expo.easeOut, delay: j*0.1, onStart:function() {\n                document.getElementById('pop').play();\n            }});\n            j++;\n        }\n    };\n\n    CubeManager.prototype.displayVerticalCubes = function() {\n        for (var j = -7; j <= 7; j++) {\n            for (var i = 1; i <= 3; i++) {\n                var cube = new Cube(1, 1, 1);\n                cube.position.set(j*150, i*150, 0);\n                cube.scale.x = 0.1;\n                cube.scale.y = 0.1;\n                this.cubes.push(cube);\n                webgl.scene.add(cube);\n                TweenLite.to(cube.scale, 0.3, {x: this.cubesDim, y: this.cubesDim, z: 1, ease: Expo.easeOut, delay: (j*0.1)+1, onStart: function() {\n                    document.getElementById('pop').play();\n                }});\n            }\n            for (var i = -1; i >= -3; i--) {\n                var cube = new Cube(1, 1, 1);\n                cube.position.set(j*150, i*150, 0);\n                cube.scale.x = 0.1;\n                cube.scale.y = 0.1;\n                this.cubes.push(cube);\n                webgl.scene.add(cube);\n                TweenLite.to(cube.scale, 0.3, {x: this.cubesDim, y: this.cubesDim, z: 1, ease: Expo.easeOut, delay: (j*0.1)+1, onStart: function() {\n                    document.getElementById('pop').play();\n                }});\n            }\n        }\n        \n    };\n\n    CubeManager.prototype.addZCubes = function() {\n        cubeManager = this;\n        var i = 0;\n        for (i = 0; i < this.cubes.length; i++) {\n            TweenLite.to(this.cubes[i].scale, 1, {x: 100, y: 100, z: 100, delay: 0.4, ease: Expo.easeOut, onStart: function() {\n                webgl.hoverInteraction = false;\n            },\n            onComplete: function() {\n                window.setTimeout(function() {\n                    cubeManager.cubesRotation = true;\n                    document.getElementById('c2c').play();\n                    webgl.moveLight();\n                }, 500);\n            }});\n        }\n    };\n\n    CubeManager.prototype.rotateCubes = function() {\n        if (webgl.counter % 200 == 0) {\n            this.rotationSpeed = webgl.counter / 200 * 0.01;\n        }\n        var i = 0;\n        for (i = 0; i < this.cubes.length; i++) {\n            this.cubes[i].rotation.x += this.rotationSpeed;\n        }\n\n        if (webgl.counter == 1000) {\n            this.moveCubesToCenter();\n            webgl.counter = -1\n        }\n        \n        if (webgl.counter >= 0) {\n            webgl.counter += 1;\n        }\n    };\n\n    CubeManager.prototype.moveCubesToCenter = function() {\n        cubeManager = this;\n        for (i = 0; i < this.cubes.length; i++) {\n            TweenLite.to(this.cubes[i].position, 7, {x: 0, y: 0, z: 0, ease: Quad.easeIn, delay: i*0.03});\n            TweenLite.to(this.cubes[i].rotation, 1, {z: -10, ease: Quad.easeIn, delay: i*0.03});\n            TweenLite.to(this.cubes[i].rotation, 1, {z: 10, ease: Quad.easeIn, delay: i*0.03 + 4.15});\n        }\n        window.setTimeout(function() {\n            cubeManager.removeAllCubesButFirst();\n            TweenLite.to(cubeManager.cubes[0].rotation, 1, {z: 0, ease: Quad.easeIn});\n        }, 10150);\n    };\n\n    CubeManager.prototype.removeAllCubesButFirst = function() {\n        for (i = 1; i < this.cubes.length; i++) {\n            webgl.scene.remove(this.cubes[i]);\n        }\n        var firstCube = this.cubes[0];\n        this.cubes = [firstCube];\n        this.growCube();\n    };\n\n    CubeManager.prototype.growCube = function() {\n        cubeManager = this;\n        TweenLite.to(this.cubes[0].scale, 0.8, {x: 300, y: 300, z: 300, ease: Expo.easeIn, onComplete: function() {\n            cubeManager.cubesRotation = false;\n            TweenLite.to(cubeManager.cubes[0].rotation, 1.2, {x: 0, onComplete: function() {\n                window.setTimeout(function() {\n                    webgl.scene.remove(cubeManager.cubes[0]);\n\n                    webgl.cubeParticles = new CubeParticles();\n                    webgl.spreadParticles = true;\n                    webgl.scene.add(webgl.cubeParticles);\n                    webgl.cubeParticles.explode();\n                }, 1000);\n\n                window.setTimeout(function() {\n                    webgl.glichEffect = true;\n                }, 4000);\n            }});\n        }});\n    }\n\n    return CubeManager;\n\n})();","var CubeParticles = (function(){\n\n    function CubeParticles() {\n        THREE.Object3D.call(this);\n        \n        this.particles = 8000;\n        this.rotate = false;\n        this.colors = [new THREE.Color(0x113F59), new THREE.Color(0x19BEC0), new THREE.Color(0xF3EDD3), new THREE.Color(0xD54F58), new THREE.Color(0x444444)];\n\n        var geometry = new THREE.BufferGeometry();\n\n        var positions = new Float32Array( this.particles * 3 );\n        var colors = new Float32Array( this.particles * 3 );\n\n        var color = new THREE.Color();\n\n        var n = 300, n2 = n / 2; // particles spread in the cube\n\n        for ( var i = 0; i < positions.length; i += 3 ) {\n\n            // positions\n\n            var x = Math.random() * n - n2;\n            var y = Math.random() * n - n2;\n            var z = Math.random() * n - n2;\n\n            positions[ i ]     = x;\n            positions[ i + 1 ] = y;\n            positions[ i + 2 ] = z;\n\n            // colors\n\n            colors[ i ]     = 102 / 255;\n            colors[ i + 1 ] = 102 / 255;\n            colors[ i + 2 ] = 102 / 255;\n\n        }\n\n        geometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );\n        geometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );\n\n        geometry.computeBoundingSphere();\n\n        //\n\n        var material = new THREE.PointCloudMaterial( { size: 10, vertexColors: THREE.VertexColors } );\n\n        this.particleSystem = new THREE.PointCloud( geometry, material );\n        this.add(this.particleSystem);\n    }\n\n    CubeParticles.prototype = new THREE.Object3D;\n    CubeParticles.prototype.constructor = CubeParticles;\n\n    CubeParticles.prototype.explode = function() {\n        var cubeParticles = this;\n\n        var positions = this.particleSystem.geometry.attributes.position.array;\n\n        var n = window.innerWidth, n2 = n / 2;\n\n        var newPositions = new Float32Array( this.particles * 3 );\n        for(var i = 0; i < newPositions.length; i += 3) {\n            var x = Math.random() * n - n2;\n            var y = Math.random() * n - n2;\n            var z = Math.random() * n - n2;\n\n            newPositions[ i ]     = x;\n            newPositions[ i + 1 ] = y;\n            newPositions[ i + 2 ] = z;\n        }\n        \n        newPositions.onComplete = function() {\n            cubeParticles.rotate = true;\n        };\n        TweenLite.to(this.particleSystem.geometry.attributes.position.array, 5, newPositions);\n        window.setInterval(function() {\n            TweenLite.to(cubeParticles.rotation, 1, {y: 100, ease: Expo.easeOut});\n            webgl.renderer.setClearColor(0xF3EDD3);\n            window.setTimeout(function() {\n                webgl.renderer.setClearColor(0x19bec0);\n            }, 1500);\n        }, 12000);\n    }\n\n    CubeParticles.prototype.changeColors = function() {\n        var colors = this.particleSystem.geometry.attributes.color.array;\n\n        var newColors = new Float32Array( this.particles * 3 );\n        for(var i = 0; i < newColors.length; i += 3) {\n            var newColor = this.colors[Math.floor(Math.random() * this.colors.length)];\n\n            newColors[ i ]     = newColor.r;\n            newColors[ i + 1 ] = newColor.g;\n            newColors[ i + 2 ] = newColor.b;\n        }\n\n        this.particleSystem.geometry.attributes.color.array = newColors;\n    }\n\n    CubeParticles.prototype.update = function() {\n        this.particleSystem.geometry.attributes.position.needsUpdate = true;\n        this.particleSystem.geometry.attributes.color.needsUpdate = true;\n\n        this.changeColors();\n\n        if (this.rotate) {\n            this.rotation.y += 0.005;\n        }\n    }\n\n    return CubeParticles;\n\n})();\n","var Sphere = (function(){\n\n    function Sphere(){\n        THREE.Object3D.call(this);\n\n        var geometry = new THREE.SphereGeometry(35);\n        var material = new THREE.MeshBasicMaterial({color: 0x3facc8, wireframe: true});\n        this.mesh = new THREE.Mesh(geometry, material);\n        this.add(this.mesh);\n    }\n\n    Sphere.prototype = new THREE.Object3D;\n    Sphere.prototype.constructor = Sphere;\n\n    Sphere.prototype.update = function() {\n        this.mesh.rotation.y += 0.01;\n    };\n\n    return Sphere;\n})();","var Triangle = (function(){\n\n    function Triangle(){\n        THREE.Object3D.call(this);\n\n        var geometry = new THREE.TetrahedronGeometry(70, 0);\n\n        //geometry.faces[0].color.setHex(0x888888);\n\n        for ( var i = 0; i < geometry.faces.length; i ++ ) {\n            geometry.faces[ i ].color.setHex( Math.random() * 0xffffff );\n        }\n\n        var material = new THREE.MeshBasicMaterial({\n            color: 0xffffff,\n            vertexColors: THREE.FaceColors\n        });\n\n        this.mesh = new THREE.Mesh(geometry, material);\n        this.mesh.rotation.y = Math.PI/4;\n        this.mesh.rotation.x = Math.PI;\n        this.add(this.mesh);\n    }\n\n    Triangle.prototype = new THREE.Object3D;\n    Triangle.prototype.constructor = Triangle;\n\n    Triangle.prototype.update = function() {\n        //this.mesh.rotation.x += 0.01;\n    };\n\n    return Triangle;\n})();"],"sourceRoot":"/source/"}