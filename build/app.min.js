var webgl, gui;

$(document).ready(init);

function init(){
    webgl = new Webgl(window.innerWidth, window.innerHeight);
    $('.three').append(webgl.renderer.domElement);

    gui = new dat.GUI();
    gui.add(webgl.camera.rotation, 'x').min(-20).max(20);
    gui.close();

    $(window).on('resize', resizeHandler);
    // when the mouse moves, call the given function
    $(window).on('mousemove', onDocumentMouseMove);

    animate();

}

function resizeHandler() {
    webgl.resize(window.innerWidth, window.innerHeight);
}

function onDocumentMouseMove(event) {
    // the following line would stop any other event handler from firing
    // (such as the mouse's TrackballControls)
    event.preventDefault();
    
    // update the mouse variable
    webgl.mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
    webgl.mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;
}

function animate() {
    requestAnimationFrame(animate);
    webgl.render();
}
var Webgl = (function(){

    function Webgl(width, height){
        webgl = this;

        // Basic three.js setup
        this.scene = new THREE.Scene();
        
        this.camera = new THREE.PerspectiveCamera(50, width / height, 1, 10000);
        this.camera.position.z = 300;

        this.renderer = new THREE.WebGLRenderer();
        this.renderer.setSize(width, height);
        this.renderer.setClearColor(0xebc130);


        // Light
        var sphere = new THREE.SphereGeometry( 0.5, 16, 8 );

        this.light = new THREE.PointLight(0xffffff, 100, 1200);
        this.light.add( new THREE.Mesh(sphere, new THREE.MeshBasicMaterial({ color: 0xff0040 })));
        this.light.position.set(0, 0, 350);
        this.scene.add(this.light);

        this.cubeParticles = new CubeParticles();

        // Global variables
        this.mouse = { x: 0, y: 0 };
        this.INTERSECTED;

        this.counter = 200;
        this.hoverInteraction = false;
        this.cubesRotation = false;
        this.cubes = [];
        this.cubesDim = 100;

        // Display first cube
        var cube = new Cube(1, 1, 1);
        cube.scale.y = 10;
        cube.position.set(-this.cubesDim/2, -this.cubesDim/2 , 0);
        this.scene.add(cube);
        this.cubes = [cube];

        TweenLite.to(cube.scale, 0.8, {x: this.cubesDim, ease: Expo.easeIn});

        TweenLite.to(cube.position, 0.8, {x: 0, ease: Expo.easeIn});

        TweenLite.to(cube.scale, 0.8, {y: this.cubesDim, delay: 0.8, ease: Expo.easeOut});

        TweenLite.to(cube.position, 0.8, {y: 0, delay: 0.8, ease: Expo.easeOut, onComplete: function() {
            animateTwoSquares();
        }});

        // Display two other cubes
        this.cubes.push(new Cube(1, 1, 1), new Cube(1, 1, 1));
        this.cubes[1].scale.x = this.cubesDim;
        this.cubes[1].scale.y = this.cubesDim;
        this.cubes[2].scale.x = this.cubesDim;
        this.cubes[2].scale.y = this.cubesDim;

        function animateTwoSquares() {
            webgl.scene.add(webgl.cubes[1]);
            webgl.scene.add(webgl.cubes[2]);

            TweenLite.to(webgl.cubes[1].position, 0.8, {x: -150, ease: Expo.easeOut});

            TweenLite.to(webgl.cubes[2].position, 0.8, {x: 150, ease: Expo.easeOut, onComplete: function() {
                awayCamera();  
            }});
        }

        function awayCamera() {
            TweenLite.to(webgl.camera.position, 0.8, {z: 1000, ease: Expo.easeOut, onComplete: function() {
                displayHorizontalCubes();
                popCubes(3, 8);
                popCubes(9, 14);
                displayVerticalCubes();
                webgl.hoverInteraction = true;
                window.setTimeout(function() {
                    addZCubes();
                }, 5000);
                
            }});
        }

        function popCubes(minIndex, maxIndex) {
            var j = 0;
            for (var i = minIndex; i <= maxIndex; i++) {
                var cube = webgl.cubes[i];
                webgl.scene.add(cube);
                TweenLite.to(cube.scale, 0.3, {x: webgl.cubesDim, y: webgl.cubesDim, z: 1, ease: Expo.easeOut, delay: j*0.1});
                j++;
            }
        }

        function displayHorizontalCubes() {
            // Left
            for (var i = -2; i >= -7; i--) {
                var cube = new Cube(1, 1, 1);
                cube.position.set(i* 150 ,0, 0);
                webgl.cubes.push(cube);
            }
            // Right
            for (var i = 2; i <= 7; i++) {
                var cube = new Cube(1, 1, 1);
                cube.position.set(i* 150 ,0, 0);
                webgl.cubes.push(cube);
            }
        }

        function displayVerticalCubes() {
            for (var j = -7; j <= 7; j++) {
                for (var i = 1; i <= 3; i++) {
                    var cube = new Cube(1, 1, 1);
                    cube.position.set(j*150, i*150, 0);
                    cube.scale.x = 0.1;
                    cube.scale.y = 0.1;
                    webgl.cubes.push(cube);
                    webgl.scene.add(cube);
                    TweenLite.to(cube.scale, 0.3, {x: webgl.cubesDim, y: webgl.cubesDim, z: 1, ease: Expo.easeOut, delay: (j*0.1)+1});
                }
                for (var i = -1; i >= -3; i--) {
                    var cube = new Cube(1, 1, 1);
                    cube.position.set(j*150, i*150, 0);
                    cube.scale.x = 0.1;
                    cube.scale.y = 0.1;
                    webgl.cubes.push(cube);
                    webgl.scene.add(cube);
                    TweenLite.to(cube.scale, 0.3, {x: webgl.cubesDim, y: webgl.cubesDim, z: 1, ease: Expo.easeOut, delay: (j*0.1)+1});
                }
            }
            
        }

        function addZCubes() {
            var i = 0;
            for (i = 0; i < webgl.cubes.length; i++) {
                //webgl.cubes[i].rotation.z = -10;
                TweenLite.to(webgl.cubes[i].scale, 1, {x: 100, y: 100, z: 100, ease: Expo.easeOut, onStart: function() {
                    webgl.hoverInteraction = false;
                },
                onComplete: function() {
                    webgl.cubesRotation = true;
                    moveLight();
                }});
            }
        }

        function moveLight() {
            TweenLite.to(webgl.light.position, 1, {x: -100, y: -100, z: 50});
            webgl.light.intensity = 200;
        }

    }

    Webgl.prototype.resize = function(width, height) {
        this.camera.aspect = width / height;
        this.camera.updateProjectionMatrix();
        this.renderer.setSize(width, height);
    };

    Webgl.prototype.render = function() {    
        this.renderer.render(this.scene, this.camera);

        this.cubeParticles.update();

        if (this.hoverInteraction) {
            this.cubesHoverEffects();
        }
        if (this.cubesRotation) {
            this.rotateCubes();
        }
    };

    Webgl.prototype.rotateCubes = function() {
        if (this.counter % 200 == 0) {
            this.rotationSpeed = this.counter / 200 * 0.01;
        }
        var i = 0;
        for (i = 0; i < webgl.cubes.length; i++) {
            webgl.cubes[i].rotation.x += this.rotationSpeed;
        }

        if (this.counter == 1000) {
            this.moveCubesToCenter();
            this.counter = -1
        }
        
        if (this.counter >= 0) {
            this.counter += 1;
        }
    }

    Webgl.prototype.moveCubesToCenter = function() {
        for (i = 0; i < this.cubes.length; i++) {
            TweenLite.to(this.cubes[i].position, 7, {x: 0, y: 0, z: 0, ease: Quad.easeIn, delay: i*0.03});
        }
        window.setTimeout(function() {
            webgl.removeAllCubesButFirst();
        }, 10150);
    }

    Webgl.prototype.removeAllCubesButFirst = function() {
        for (i = 1; i < this.cubes.length; i++) {
            this.scene.remove(this.cubes[i]);
        }
        var firstCube = this.cubes[0];
        this.cubes = [firstCube];
        webgl.growCube();
    }

    Webgl.prototype.growCube = function() {
        TweenLite.to(this.cubes[0].scale, 0.8, {x: 300, y: 300, z: 300, ease: Expo.easeIn, onComplete: function() {
            webgl.cubesRotation = false;
            TweenLite.to(webgl.cubes[0].rotation, 1.2, {x: 0, onComplete: function() {
                webgl.scene.remove(webgl.cubes[0]);
                webgl.scene.add(this.cubeParticles);
                webgl.cubeParticles.explode();
            }});
        }});
    }

    Webgl.prototype.cubesHoverEffects = function() {
        // find intersections

        // create a Ray with origin at the mouse position
        //   and direction into the scene (camera direction)
        var vector = new THREE.Vector3(this.mouse.x, this.mouse.y, 1).unproject(this.camera);
        var ray = new THREE.Raycaster(this.camera.position, vector.sub(this.camera.position).normalize());

        // create an array containing all objects in the scene with which the ray intersects
        var intersects = ray.intersectObjects(this.scene.children, true);
        
        // if there is one (or more) intersections
        if (intersects.length > 0)
        {
            // if the closest object intersected is not the currently stored intersection object
            if (intersects[0].object != this.INTERSECTED) 
            {
                if (this.INTERSECTED) {
                    TweenLite.to(this.INTERSECTED.scale, 0.1, {x: 1, y: 1});
                    TweenLite.to(this.INTERSECTED.rotation, 0.1, {z: 0});
                }
                // store reference to closest object as current intersection object
                this.INTERSECTED = intersects[0].object;
                TweenLite.to(this.INTERSECTED.scale, 0.1, {x: 1.4, y: 1.4});
                TweenLite.to(this.INTERSECTED.rotation, 0.1, {z: 10});
            }
        } 
        else // there are no intersections
        {
            if (this.INTERSECTED) {
                TweenLite.to(this.INTERSECTED.scale, 0.3, {x: 1, y: 1});
                TweenLite.to(this.INTERSECTED.rotation, 0.1, {z: 0});
            }

            this.INTERSECTED = null;
        }
    }

    return Webgl;

})();
var Cube = (function(){

    function Cube(width, height, depth){
        THREE.Object3D.call(this);

        var geometry = new THREE.BoxGeometry(width, height, depth);
        var material = new THREE.MeshLambertMaterial({ color: 0xffffff})

        this.mesh = new THREE.Mesh(geometry, material);
        this.mesh.position.set(0, 0, 0);
        //this.mesh.rotation.x = 10;
        this.add(this.mesh);
    }

    Cube.prototype = new THREE.Object3D;
    Cube.prototype.constructor = Cube;

    Cube.prototype.update = function() {
        //this.mesh.rotation.z += 0.01;
    };

    return Cube;
})();
var CubeManager = (function(){

	function CubeManager(){
		this.cubesDim = 100;
		this.cubes = [];
	}

	function animateTwoSquares(duration) {
        TweenLite.to(this.cubes[1].position, duration, {x: -150, ease: Expo.easeOut});

        TweenLite.to(this.cubes[2].position, duration, {x: 150, ease: Expo.easeOut, onComplete: function() {
            awayCamera();  
        }});
    }

    function displayHorizontalCubes() {
        // Left
        for (var i = -2; i >= -7; i--) {
            var cube = new Cube(1, 1, 1);
            cube.position.set(i* 150 ,0, 0);
            this.cubes.push(cube);
        }
        // Right
        for (var i = 2; i <= 7; i++) {
            var cube = new Cube(1, 1, 1);
            cube.position.set(i* 150 ,0, 0);
            this.cubes.push(cube);
        }
    }

    return CubeManager;

})();
var CubeParticles = (function(){

    function CubeParticles() {
        THREE.Object3D.call(this);
        
        this.particles = 8000;

        var geometry = new THREE.BufferGeometry();

        var positions = new Float32Array( this.particles * 3 );
        var colors = new Float32Array( this.particles * 3 );

        var color = new THREE.Color();

        var n = 100, n2 = n / 2; // particles spread in the cube

        for ( var i = 0; i < positions.length; i += 3 ) {

            // positions

            var x = Math.random() * n - n2;
            var y = Math.random() * n - n2;
            var z = Math.random() * n - n2;

            positions[ i ]     = x;
            positions[ i + 1 ] = y;
            positions[ i + 2 ] = z;

            // colors

            var vx = ( x / n ) + 0.5;
            var vy = ( y / n ) + 0.5;
            var vz = ( z / n ) + 0.5;

            color.setRGB( vx, vy, vz );

            colors[ i ]     = color.r;
            colors[ i + 1 ] = color.g;
            colors[ i + 2 ] = color.b;

        }

        geometry.addAttribute( 'position', new THREE.BufferAttribute( positions, 3 ) );
        geometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3 ) );

        geometry.computeBoundingSphere();

        //

        var material = new THREE.PointCloudMaterial( { size: 10, vertexColors: THREE.VertexColors } );

        this.particleSystem = new THREE.PointCloud( geometry, material );
        this.add(this.particleSystem);
    }

    CubeParticles.prototype = new THREE.Object3D;
    CubeParticles.prototype.constructor = CubeParticles;

    CubeParticles.prototype.explode = function() {
        var positions = this.particleSystem.geometry.attributes.position.array;

        var n = window.innerWidth / 2, n2 = n / 2;

        var newPositions = new Float32Array( this.particles * 3 );
        for(var i = 0; i < newPositions.length; i += 3) {
            var x = Math.random() * n - n2;
            var y = Math.random() * n - n2;
            var z = Math.random() * n - n2;

            newPositions[ i ]     = x;
            newPositions[ i + 1 ] = y;
            newPositions[ i + 2 ] = z;
        }
        console.log(this.particleSystem.geometry.attributes.position.array);
        var test = this;
        newPositions.onComplete = function() {
            console.log(test.particleSystem.geometry.attributes.position.array);
        };
        TweenLite.to(this.particleSystem.geometry.attributes.position.array, 50, newPositions); //tween the values of a to those of b over 2 seconds, and log them to the console.

    };

    CubeParticles.prototype.update = function() {
        this.particleSystem.geometry.attributes.position.needsUpdate = true;
    }

    return CubeParticles;

})();

var Sphere = (function(){

    function Sphere(){
        THREE.Object3D.call(this);

        var geometry = new THREE.SphereGeometry(35);
        var material = new THREE.MeshBasicMaterial({color: 0x3facc8, wireframe: true});
        this.mesh = new THREE.Mesh(geometry, material);
        this.add(this.mesh);
    }

    Sphere.prototype = new THREE.Object3D;
    Sphere.prototype.constructor = Sphere;

    Sphere.prototype.update = function() {
        this.mesh.rotation.y += 0.01;
    };

    return Sphere;
})();
var Triangle = (function(){

    function Triangle(){
        THREE.Object3D.call(this);

        var geometry = new THREE.TetrahedronGeometry(70, 0);

        //geometry.faces[0].color.setHex(0x888888);

        for ( var i = 0; i < geometry.faces.length; i ++ ) {
            geometry.faces[ i ].color.setHex( Math.random() * 0xffffff );
        }

        var material = new THREE.MeshBasicMaterial({
            color: 0xffffff,
            vertexColors: THREE.FaceColors
        });

        this.mesh = new THREE.Mesh(geometry, material);
        this.mesh.rotation.y = Math.PI/4;
        this.mesh.rotation.x = Math.PI;
        this.add(this.mesh);
    }

    Triangle.prototype = new THREE.Object3D;
    Triangle.prototype.constructor = Triangle;

    Triangle.prototype.update = function() {
        //this.mesh.rotation.x += 0.01;
    };

    return Triangle;
})();
//# sourceMappingURL=app.min.js.map